{
  "version": 3,
  "sources": ["../webapp/modules/Avalonia/DpiWatcher.ts", "../webapp/modules/Avalonia/InputHelper.ts", "../webapp/modules/Avalonia/NativeControlHost.ts", "../webapp/modules/Avalonia/SizeWatcher.ts", "../webapp/modules/Avalonia/SKHtmlCanvas.ts"],
  "sourcesContent": ["\uFEFFexport class DpiWatcher {\r\n    static lastDpi: number;\r\n    static timerId: number;\r\n    static callback?: DotNet.DotNetObject;\r\n\r\n    public static getDpi() {\r\n        return window.devicePixelRatio;\r\n    }\r\n\r\n    public static start(callback: DotNet.DotNetObject): number {\r\n        //console.info(`Starting DPI watcher with callback ${callback._id}...`);\r\n\r\n        DpiWatcher.lastDpi = window.devicePixelRatio;\r\n        DpiWatcher.timerId = window.setInterval(DpiWatcher.update, 1000);\r\n        DpiWatcher.callback = callback;\r\n\r\n        return DpiWatcher.lastDpi;\r\n    }\r\n\r\n    public static stop() {\r\n        //console.info(`Stopping DPI watcher with callback ${DpiWatcher.callback._id}...`);\r\n\r\n        window.clearInterval(DpiWatcher.timerId);\r\n\r\n        DpiWatcher.callback = undefined;\r\n    }\r\n\r\n    static update() {\r\n        if (!DpiWatcher.callback)\r\n            return;\r\n\r\n        const currentDpi = window.devicePixelRatio;\r\n        const lastDpi = DpiWatcher.lastDpi;\r\n        DpiWatcher.lastDpi = currentDpi;\r\n\r\n        if (Math.abs(lastDpi - currentDpi) > 0.001) {\r\n            DpiWatcher.callback.invokeMethod('Invoke', lastDpi, currentDpi);\r\n        }\r\n    }\r\n}\r\n", "\uFEFFexport class InputHelper {\r\n    public static clear(inputElement: HTMLInputElement) {\r\n        inputElement.value = \"\";\r\n    }\r\n\r\n    \r\n    public static isInputElement( element : HTMLInputElement | HTMLElement ) : element is HTMLInputElement {\r\n        return ( element as HTMLInputElement).setSelectionRange !== undefined;\r\n    }\r\n\r\n    public static focus(inputElement: HTMLElement) {\r\n        inputElement.focus();\r\n        \r\n        if(this.isInputElement(inputElement))\r\n        {\r\n            (inputElement as HTMLInputElement).setSelectionRange(0,0);\r\n        }\r\n    }\r\n\r\n    public static setCursor(inputElement: HTMLInputElement, kind: string) {\r\n        inputElement.style.cursor = kind;\r\n    }\r\n\r\n    public static hide(inputElement: HTMLInputElement) {\r\n        inputElement.style.display = 'none';\r\n    }\r\n\r\n    public static show(inputElement: HTMLInputElement) {\r\n        inputElement.style.display = 'block';\r\n    }\r\n}\r\n", "\uFEFFexport class NativeControlHost {\r\n    public static CreateDefaultChild(parent: HTMLElement): HTMLElement {\r\n        return document.createElement(\"div\");\r\n    }\r\n\r\n    // Used to convert ElementReference to JSObjectReference.\r\n    // Is there a better way?\r\n    public static GetReference(element: Element): Element {\r\n        return element;\r\n    }\r\n\r\n    public static CreateAttachment(): NativeControlHostTopLevelAttachment {\r\n        return new NativeControlHostTopLevelAttachment();\r\n    }\r\n}\r\n\r\nclass NativeControlHostTopLevelAttachment {\r\n    _child?: HTMLElement;\r\n    _host?: HTMLElement;\r\n\r\n    InitializeWithChildHandle(child: HTMLElement) {\r\n        this._child = child;\r\n        this._child.style.position = \"absolute\";\r\n    }\r\n\r\n    AttachTo(host: HTMLElement): void {\r\n        if (this._host && this._child) {\r\n            this._host.removeChild(this._child);\r\n        }\r\n\r\n        this._host = host;\r\n\r\n        if (this._host && this._child) {\r\n            this._host.appendChild(this._child);\r\n        }\r\n    }\r\n\r\n    ShowInBounds(x: number, y: number, width: number, height: number): void {\r\n        if (this._child) {\r\n            this._child.style.top = y + \"px\";\r\n            this._child.style.left = x + \"px\";\r\n            this._child.style.width = width + \"px\";\r\n            this._child.style.height = height + \"px\";\r\n            this._child.style.display = \"block\";\r\n        }\r\n    }\r\n\r\n    HideWithSize(width: number, height: number): void {\r\n        if (this._child) {\r\n            this._child.style.width = width + \"px\";\r\n            this._child.style.height = height + \"px\";\r\n            this._child.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    ReleaseChild(): void {\r\n        if (this._child) {\r\n            this._child = undefined;\r\n        }\r\n    }\r\n}\r\n", "\uFEFFtype SizeWatcherElement = {\r\n    SizeWatcher: SizeWatcherInstance;\r\n} & HTMLElement\r\n\r\ntype SizeWatcherInstance = {\r\n    callback: DotNet.DotNetObject;\r\n}\r\n\r\nexport class SizeWatcher {\r\n    static observer: ResizeObserver;\r\n    static elements: Map<string, HTMLElement>;\r\n\r\n    public static observe(element: HTMLElement, elementId: string, callback: DotNet.DotNetObject) {\r\n        if (!element || !callback)\r\n            return;\r\n\r\n        //console.info(`Adding size watcher observation with callback ${callback._id}...`);\r\n\r\n        SizeWatcher.init();\r\n\r\n        const watcherElement = element as SizeWatcherElement;\r\n        watcherElement.SizeWatcher = {\r\n            callback: callback\r\n        };\r\n\r\n        SizeWatcher.elements.set(elementId, element);\r\n        SizeWatcher.observer.observe(element);\r\n\r\n        SizeWatcher.invoke(element);\r\n    }\r\n\r\n    public static unobserve(elementId: string) {\r\n        if (!elementId || !SizeWatcher.observer)\r\n            return;\r\n\r\n        //console.info('Removing size watcher observation...');\r\n\r\n        const element = SizeWatcher.elements.get(elementId)!;\r\n\r\n        SizeWatcher.elements.delete(elementId);\r\n        SizeWatcher.observer.unobserve(element);\r\n    }\r\n\r\n    static init() {\r\n        if (SizeWatcher.observer)\r\n            return;\r\n\r\n        //console.info('Starting size watcher...');\r\n\r\n        SizeWatcher.elements = new Map<string, HTMLElement>();\r\n        SizeWatcher.observer = new ResizeObserver((entries) => {\r\n            for (let entry of entries) {\r\n                SizeWatcher.invoke(entry.target);\r\n            }\r\n        });\r\n    }\r\n\r\n    static invoke(element: Element) {\r\n        const watcherElement = element as SizeWatcherElement;\r\n        const instance = watcherElement.SizeWatcher;\r\n\r\n        if (!instance || !instance.callback)\r\n            return;\r\n\r\n        return instance.callback.invokeMethod('Invoke', element.clientWidth, element.clientHeight);\r\n    }\r\n}\r\n", "\uFEFF// aliases for emscripten\r\ndeclare let GL: any;\r\ndeclare let GLctx: WebGLRenderingContext;\r\ndeclare let Module: EmscriptenModule;\r\n\r\n// container for gl info\r\ntype SKGLViewInfo = {\r\n    context: WebGLRenderingContext | WebGL2RenderingContext | undefined;\r\n    fboId: number;\r\n    stencil: number;\r\n    sample: number;\r\n    depth: number;\r\n}\r\n\r\n// alias for a potential skia html canvas\r\ntype SKHtmlCanvasElement = {\r\n    SKHtmlCanvas: SKHtmlCanvas | undefined\r\n} & HTMLCanvasElement\r\n\r\nexport class SKHtmlCanvas {\r\n    static elements: Map<string, HTMLCanvasElement>;\r\n\r\n    htmlCanvas: HTMLCanvasElement;\r\n    glInfo?: SKGLViewInfo;\r\n    renderFrameCallback: DotNet.DotNetObject;\r\n    renderLoopEnabled: boolean = false;\r\n    renderLoopRequest: number = 0;\r\n    newWidth?: number;\r\n    newHeight?: number;\r\n\r\n    public static initGL(element: HTMLCanvasElement, elementId: string, callback: DotNet.DotNetObject): SKGLViewInfo | null {\r\n        var view = SKHtmlCanvas.init(true, element, elementId, callback);\r\n        if (!view || !view.glInfo)\r\n            return null;\r\n\r\n        return view.glInfo;\r\n    }\r\n\r\n    public static initRaster(element: HTMLCanvasElement, elementId: string, callback: DotNet.DotNetObject): boolean {\r\n        var view = SKHtmlCanvas.init(false, element, elementId, callback);\r\n        if (!view)\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    static init(useGL: boolean, element: HTMLCanvasElement, elementId: string, callback: DotNet.DotNetObject): SKHtmlCanvas | null {\r\n        var htmlCanvas = element as SKHtmlCanvasElement;\r\n        if (!htmlCanvas) {\r\n            console.error(`No canvas element was provided.`);\r\n            return null;\r\n        }\r\n\r\n        if (!SKHtmlCanvas.elements)\r\n            SKHtmlCanvas.elements = new Map<string, HTMLCanvasElement>();\r\n        SKHtmlCanvas.elements.set(elementId, element);\r\n\r\n        const view = new SKHtmlCanvas(useGL, element, callback);\r\n\r\n        htmlCanvas.SKHtmlCanvas = view;\r\n\r\n        return view;\r\n    }\r\n\r\n    public static deinit(elementId: string) {\r\n        if (!elementId)\r\n            return;\r\n\r\n        const element = SKHtmlCanvas.elements.get(elementId);\r\n        SKHtmlCanvas.elements.delete(elementId);\r\n\r\n        const htmlCanvas = element as SKHtmlCanvasElement;\r\n        if (!htmlCanvas || !htmlCanvas.SKHtmlCanvas)\r\n            return;\r\n\r\n        htmlCanvas.SKHtmlCanvas.deinit();\r\n        htmlCanvas.SKHtmlCanvas = undefined;\r\n    }\r\n\r\n    public static requestAnimationFrame(element: HTMLCanvasElement, renderLoop?: boolean) {\r\n        const htmlCanvas = element as SKHtmlCanvasElement;\r\n        if (!htmlCanvas || !htmlCanvas.SKHtmlCanvas)\r\n            return;\r\n\r\n        htmlCanvas.SKHtmlCanvas.requestAnimationFrame(renderLoop);\r\n    }\r\n\r\n    public static setCanvasSize(element: HTMLCanvasElement, width: number, height: number) {\r\n        const htmlCanvas = element as SKHtmlCanvasElement;\r\n        if (!htmlCanvas || !htmlCanvas.SKHtmlCanvas)\r\n            return;\r\n\r\n        htmlCanvas.SKHtmlCanvas.setCanvasSize(width, height);\r\n    }\r\n\r\n    public static setEnableRenderLoop(element: HTMLCanvasElement, enable: boolean) {\r\n        const htmlCanvas = element as SKHtmlCanvasElement;\r\n        if (!htmlCanvas || !htmlCanvas.SKHtmlCanvas)\r\n            return;\r\n\r\n        htmlCanvas.SKHtmlCanvas.setEnableRenderLoop(enable);\r\n    }\r\n\r\n    public static putImageData(element: HTMLCanvasElement, pData: number, width: number, height: number) {\r\n        const htmlCanvas = element as SKHtmlCanvasElement;\r\n        if (!htmlCanvas || !htmlCanvas.SKHtmlCanvas)\r\n            return;\r\n\r\n        htmlCanvas.SKHtmlCanvas.putImageData(pData, width, height);\r\n    }\r\n\r\n    public constructor(useGL: boolean, element: HTMLCanvasElement, callback: DotNet.DotNetObject) {\r\n        this.htmlCanvas = element;\r\n        this.renderFrameCallback = callback;\r\n\r\n        if (useGL) {\r\n            const ctx = SKHtmlCanvas.createWebGLContext(this.htmlCanvas);\r\n            if (!ctx) {\r\n                console.error(`Failed to create WebGL context: err ${ctx}`);\r\n                return;\r\n            }\r\n\r\n            // make current\r\n            GL.makeContextCurrent(ctx);\r\n\r\n            // read values\r\n            const fbo = GLctx.getParameter(GLctx.FRAMEBUFFER_BINDING);\r\n            this.glInfo = {\r\n                context: ctx,\r\n                fboId: fbo ? fbo.id : 0,\r\n                stencil: GLctx.getParameter(GLctx.STENCIL_BITS),\r\n                sample: 0, // TODO: GLctx.getParameter(GLctx.SAMPLES)\r\n                depth: GLctx.getParameter(GLctx.DEPTH_BITS),\r\n            };\r\n        }\r\n    }\r\n\r\n    public deinit() {\r\n        this.setEnableRenderLoop(false);\r\n    }\r\n\r\n    public setCanvasSize(width: number, height: number) {\r\n        this.newWidth = width;\r\n        this.newHeight = height;\r\n\r\n        if (this.htmlCanvas.width != this.newWidth) {\r\n            this.htmlCanvas.width = this.newWidth;\r\n        }\r\n\r\n        if (this.htmlCanvas.height != this.newHeight) {\r\n            this.htmlCanvas.height = this.newHeight;\r\n        }\r\n\r\n        if (this.glInfo) {\r\n            // make current\r\n            GL.makeContextCurrent(this.glInfo.context);\r\n        }\r\n    }\r\n\r\n    public requestAnimationFrame(renderLoop?: boolean) {\r\n        // optionally update the render loop\r\n        if (renderLoop !== undefined && this.renderLoopEnabled !== renderLoop)\r\n            this.setEnableRenderLoop(renderLoop);\r\n\r\n        // skip because we have a render loop\r\n        if (this.renderLoopRequest !== 0)\r\n            return;\r\n\r\n        // add the draw to the next frame\r\n        this.renderLoopRequest = window.requestAnimationFrame(() => {\r\n            if (this.glInfo) {\r\n                // make current\r\n                GL.makeContextCurrent(this.glInfo.context);\r\n            }\r\n\r\n            if (this.htmlCanvas.width != this.newWidth) {\r\n                this.htmlCanvas.width = this.newWidth || 0;\r\n            }\r\n\r\n            if (this.htmlCanvas.height != this.newHeight) {\r\n                this.htmlCanvas.height = this.newHeight || 0;\r\n            }\r\n\r\n            this.renderFrameCallback.invokeMethod('Invoke');\r\n            this.renderLoopRequest = 0;\r\n\r\n            // we may want to draw the next frame\r\n            if (this.renderLoopEnabled)\r\n                this.requestAnimationFrame();\r\n        });\r\n    }\r\n\r\n    public setEnableRenderLoop(enable: boolean) {\r\n        this.renderLoopEnabled = enable;\r\n\r\n        // either start the new frame or cancel the existing one\r\n        if (enable) {\r\n            //console.info(`Enabling render loop with callback ${this.renderFrameCallback._id}...`);\r\n            this.requestAnimationFrame();\r\n        } else if (this.renderLoopRequest !== 0) {\r\n            window.cancelAnimationFrame(this.renderLoopRequest);\r\n            this.renderLoopRequest = 0;\r\n        }\r\n    }\r\n\r\n    public putImageData(pData: number, width: number, height: number): boolean {\r\n        if (this.glInfo || !pData || width <= 0 || width <= 0)\r\n            return false;\r\n\r\n        var ctx = this.htmlCanvas.getContext('2d');\r\n        if (!ctx) {\r\n            console.error(`Failed to obtain 2D canvas context.`);\r\n            return false;\r\n        }\r\n\r\n        // make sure the canvas is scaled correctly for the drawing\r\n        this.htmlCanvas.width = width;\r\n        this.htmlCanvas.height = height;\r\n\r\n        // set the canvas to be the bytes\r\n        var buffer = new Uint8ClampedArray(Module.HEAPU8.buffer, pData, width * height * 4);\r\n        var imageData = new ImageData(buffer, width, height);\r\n        ctx.putImageData(imageData, 0, 0);\r\n\r\n        return true;\r\n    }\r\n\r\n    static createWebGLContext(htmlCanvas: HTMLCanvasElement): WebGLRenderingContext | WebGL2RenderingContext {\r\n        const contextAttributes = {\r\n            alpha: 1,\r\n            depth: 1,\r\n            stencil: 8,\r\n            antialias: 0,\r\n            premultipliedAlpha: 1,\r\n            preserveDrawingBuffer: 0,\r\n            preferLowPowerToHighPerformance: 0,\r\n            failIfMajorPerformanceCaveat: 0,\r\n            majorVersion: 2,\r\n            minorVersion: 0,\r\n            enableExtensionsByDefault: 1,\r\n            explicitSwapControl: 0,\r\n            renderViaOffscreenBackBuffer: 1,\r\n        };\r\n\r\n        let ctx: WebGLRenderingContext = GL.createContext(htmlCanvas, contextAttributes);\r\n        if (!ctx && contextAttributes.majorVersion > 1) {\r\n            console.warn('Falling back to WebGL 1.0');\r\n            contextAttributes.majorVersion = 1;\r\n            contextAttributes.minorVersion = 0;\r\n            ctx = GL.createContext(htmlCanvas, contextAttributes);\r\n        }\r\n\r\n        return ctx;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["DpiWatcher", "callback", "currentDpi", "lastDpi", "InputHelper", "inputElement", "element", "kind", "NativeControlHost", "parent", "element", "NativeControlHostTopLevelAttachment", "child", "host", "x", "y", "width", "height", "SizeWatcher", "element", "elementId", "callback", "watcherElement", "entries", "entry", "instance", "SKHtmlCanvas", "useGL", "element", "callback", "ctx", "fbo", "elementId", "view", "htmlCanvas", "renderLoop", "width", "height", "enable", "pData", "buffer", "imageData", "contextAttributes"]
}
